{"version":3,"sources":["../dist-es6/index.js"],"names":["dirDefault","dtFormatFileDefault","dtFormatLogDefault","LogFile","dir","dtFormatFile","dtFormatLog","log","args","date","format","fileName","join","writeFile","getFileTxt","txt","Object","prototype","toString","call","forEach","arg","JSON","stringify","String","err"],"mappings":";;;;;;;;;AAAA;;AACA;;;;AACA;;;;AACA;;;;AACA,IAAMA,aAAa,SAAnB;AACA,IAAMC,sBAAsB,YAA5B;AACA,IAAMC,qBAAqB,sBAA3B;AACA,SAASC,OAAT,OAA6G;AAAA,wBAA1FC,GAA0F;AAAA,QAA1FA,GAA0F,4BAApFJ,UAAoF;AAAA,iCAAxEK,YAAwE;AAAA,QAAxEA,YAAwE,qCAAzDJ,mBAAyD;AAAA,gCAApCK,WAAoC;AAAA,QAApCA,WAAoC,oCAAtBJ,kBAAsB;;AACzG,QAAI,CAAC,oBAAWE,GAAX,CAAL,EACI,mBAAUA,GAAV;AACJ,aAASG,GAAT,GAAsB;AAAA,0CAANC,IAAM;AAANA,gBAAM;AAAA;;AAClB,qCAAWA,IAAX;AACA,YAAMC,OAAO,wBAASC,MAAT,CAAgBL,YAAhB,CAAb;AACA,YAAMM,WAAW,eAAKC,IAAL,CAAUR,GAAV,YAAuBK,IAAvB,UAAjB;AACAI,kBAAUF,QAAV,EAAoBG,WAAWR,WAAX,EAAwBE,IAAxB,CAApB;AACH;AACD,WAAOD,GAAP;AACH;AACD,SAASO,UAAT,CAAoBR,WAApB,EAAiCE,IAAjC,EAAuC;AACnC,QAAMC,OAAO,wBAASC,MAAT,EAAb;AACA,QAAIK,4FACNN,IADM,QAAJ;AAEA,QAAIO,OAAOC,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+BX,IAA/B,MAAyC,gBAA7C,EACIA,KAAKY,OAAL,CAAa,eAAO;AAChB,YAAI;AACA,gBAAI,QAAOC,GAAP,yCAAOA,GAAP,OAAe,QAAnB,EACIN,OAAOO,KAAKC,SAAL,CAAeF,GAAf,CAAP,CADJ,KAGIN,OAAOS,OAAOH,GAAP,CAAP;AACP,SALD,CAMA,OAAOI,GAAP,EAAY;AACR,6BAAQ,4BAAR,EAAsCA,GAAtC,EAA2C,OAA3C,EAAoDjB,IAApD,EAA0D,MAA1D,EAAkEa,GAAlE;AACA,kBAAMI,GAAN;AACH;AACJ,KAXD,EADJ,KAcIV,OAAOP,IAAP;AACJO,WAAO,oFAAP;AACA,WAAOA,GAAP;AACH;AACD,SAASF,SAAT,CAAmBF,QAAnB,EAA6BI,GAA7B,EAAkC;AAC9B,wBAAWJ,QAAX,EAAqBI,GAArB,EAA0B,UAACU,GAAD,EAAS;AAC/B,YAAIA,GAAJ,EAAS;AACL,6BAAQ,mBAAR,EAA6BA,GAA7B;AACA,kBAAMA,GAAN;AACH;AACJ,KALD;AAMH;kBACctB,O;QACNA,O,GAAAA,O;QAASF,mB,GAAAA,mB;QAAqBC,kB,GAAAA,kB;QAAoBF,U,GAAAA,U;AAC3D","file":"index.js","sourcesContent":["import { appendFile, existsSync, mkdirSync } from 'fs';\nimport moment from 'moment';\nimport path from 'path';\nimport { log as logBase } from 'ptz-log';\nconst dirDefault = './logs/';\nconst dtFormatFileDefault = 'YYYY-MM-DD';\nconst dtFormatLogDefault = 'H:mm:ss MMMM Do YYYY';\nfunction LogFile({ dir = dirDefault, dtFormatFile = dtFormatFileDefault, dtFormatLog = dtFormatLogDefault }) {\n    if (!existsSync(dir))\n        mkdirSync(dir);\n    function log(...args) {\n        logBase(...args);\n        const date = moment().format(dtFormatFile);\n        const fileName = path.join(dir, `/log-${date}.txt`);\n        writeFile(fileName, getFileTxt(dtFormatLog, args));\n    }\n    return log;\n}\nfunction getFileTxt(dtFormatLog, args) {\n    const date = moment().format();\n    var txt = `\\n>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\n${date} \\n`;\n    if (Object.prototype.toString.call(args) === '[object Array]')\n        args.forEach(arg => {\n            try {\n                if (typeof arg === 'object')\n                    txt += JSON.stringify(arg);\n                else\n                    txt += String(arg);\n            }\n            catch (err) {\n                logBase('Error writing to log file:', err, 'args:', args, 'arg:', arg);\n                throw err;\n            }\n        });\n    else\n        txt += args;\n    txt += '\\n<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< \\n';\n    return txt;\n}\nfunction writeFile(fileName, txt) {\n    appendFile(fileName, txt, (err) => {\n        if (err) {\n            logBase('Error saving Log!', err);\n            throw err;\n        }\n    });\n}\nexport default LogFile;\nexport { LogFile, dtFormatFileDefault, dtFormatLogDefault, dirDefault };\n//# sourceMappingURL=index.js.map"]}